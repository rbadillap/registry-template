{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "registry-access",
  "type": "registry:file",
  "title": "Registry Access",
  "description": "Toolkit for accessing private components from the registry.",
  "dependencies": [
    "shadcn",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card"
  ],
  "files": [
    {
      "path": "registry/default/registry/access/auth/route.ts",
      "content": "import { NextResponse } from \"next/server\"\nimport { authenticateWithBasicAuth } from \"@/lib/auth/integrations/basic-auth\"\nimport { generateToken } from \"@/lib/shadcn/registry/utils\"\nimport { type BasicAuthCredentials } from \"@/lib/shadcn/registry/types\"\n\nexport async function POST(request: Request) {\n  try {\n    const credentials: BasicAuthCredentials = await request.json()\n    const authResult = await authenticateWithBasicAuth(credentials)\n   \n    if (authResult.success) {\n      // Only generate token if authentication was successful\n      const token = await generateToken()\n      return NextResponse.json({\n        ...authResult,\n        token\n      })\n    }\n\n    return NextResponse.json(\n      authResult,\n      { status: 401 }\n    )\n  } catch (error) {\n    console.error(\"Route error:\", error)\n    return NextResponse.json(\n      { \n        success: false,\n        message: \"Invalid request format\" \n      },\n      { status: 400 }\n    )\n  }\n} ",
      "type": "registry:file",
      "target": "app/registry/access/auth/route.ts"
    },
    {
      "path": "registry/default/registry/access/login/page.tsx",
      "content": "\"use client\"\n\nimport { Suspense, useState } from \"react\"\nimport { useSearchParams } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Check, Copy, Clock } from \"lucide-react\"\nimport { verifyToken } from \"@/lib/shadcn/registry/utils\"\n\nfunction LoginContent() {\n  const searchParams = useSearchParams()\n  const returnUrl = searchParams.get(\"returnUrl\") || \"/registry\"\n  \n  const [error, setError] = useState<string>(\"\")\n  const [loading, setLoading] = useState(false)\n  const [token, setToken] = useState<string>(\"\")\n  const [copied, setCopied] = useState(false)\n  const [tokenValid, setTokenValid] = useState(false)\n  const { toast } = useToast()\n\n  async function onSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(\"\")\n    setLoading(true)\n    setCopied(false)\n    setToken(\"\")\n    setTokenValid(false)\n\n    const formData = new FormData(event.currentTarget)\n    \n    try {\n      const response = await fetch(\"/registry/access/auth\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          username: formData.get(\"username\"),\n          password: formData.get(\"password\"),\n        }),\n      })\n\n      const data = await response.json()\n\n      if (data.success) {\n        // Store the token in localStorage\n        localStorage.setItem(\"registry_token\", data.token)\n        // Set the token to display the URL\n        setToken(data.token)\n        // Verify the token\n        const isValid = await verifyToken(data.token)\n        setTokenValid(isValid)\n      } else {\n        setError(data.message)\n      }\n    } catch (err) {\n      console.error(err)\n      setError(\"An error occurred while trying to log in\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fullUrl = token ? `${window.location.origin}${returnUrl}?token=${token}` : \"\"\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(fullUrl)\n      setCopied(true)\n      toast({\n        title: \"Copied!\",\n        description: \"URL has been copied to clipboard\",\n      })\n      setTimeout(() => setCopied(false), 2000)\n    } catch (err) {\n      console.error(err)\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy URL to clipboard\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>Registry Access</CardTitle>\n        <CardDescription>\n          {token ? \"Your access URL is ready\" : \"Enter your credentials to get access URL\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {!token ? (\n          <form onSubmit={onSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                placeholder=\"Username\"\n                required\n                disabled={loading}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Password\"\n                required\n                disabled={loading}\n              />\n            </div>\n            {error && (\n              <div className=\"text-sm text-red-500\">\n                {error}\n              </div>\n            )}\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loading}\n            >\n              {loading ? \"Generating URL...\" : \"Generate Access URL\"}\n            </Button>\n          </form>\n        ) : (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-3 p-4 bg-muted rounded-lg\">\n              <Clock className=\"h-5 w-5 text-muted-foreground shrink-0\" />\n              <p className=\"text-sm text-muted-foreground\">\n                {tokenValid \n                  ? \"Your access token is valid for 1 hour from generation. After that, you'll need to generate a new one.\"\n                  : \"This token appears to be invalid or expired. Please generate a new one.\"}\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  value={fullUrl}\n                  readOnly\n                  className=\"font-mono text-sm\"\n                />\n                <Button\n                  size=\"icon\"\n                  variant=\"outline\"\n                  onClick={copyToClipboard}\n                  className=\"shrink-0\"\n                >\n                  {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Copy this URL to access the registry. The token is already included.\n              </p>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => {\n                setToken(\"\")\n                setTokenValid(false)\n                setCopied(false)\n              }}\n            >\n              Generate New Token\n            </Button>\n          </div>\n          )}\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction LoadingCard() {\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>Loading...</CardTitle>\n        <CardDescription>Please wait while we load the page</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[200px] flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default function LoginPage() {\n  return (\n    <div className=\"container flex items-center justify-center min-h-screen py-10\">\n      <Suspense fallback={<LoadingCard />}>\n        <LoginContent />\n      </Suspense>\n    </div>\n  )\n} ",
      "type": "registry:page",
      "target": "app/registry/access/login/page.tsx"
    },
    {
      "path": "registry/default/registry/route.ts",
      "content": "import { NextResponse } from \"next/server\"\nimport path from \"path\"\nimport { promises as fs } from \"fs\"\nimport { registryItemSchema } from \"shadcn/registry\"\nimport { verifyToken } from \"@/lib/shadcn/registry/utils\"\n\n// This route shows an example for serving a component using a route handler.\nexport async function GET(\n  request: Request,\n  { params }: { params: Promise<{ name: string }> }\n) {\n  try {\n    // Get the authorization token from ?token=\n    const url = new URL(request.url)\n    const token = url.searchParams.get('token')\n\n    if (!token) {\n      // If accessing via browser, redirect to login with return URL\n      if (request.headers.get(\"accept\")?.includes(\"text/html\")) {\n        // const returnUrl = encodeURIComponent(request.nextUrl?.pathname)\n        const returnUrl = encodeURIComponent(url.pathname)\n        return NextResponse.redirect(\n          new URL(`/registry/access/login?returnUrl=${returnUrl}`, request.url)\n        )\n      }\n      \n      // If API request, return 401\n      return NextResponse.json(\n        { error: \"Authorization token is required\" },\n        { status: 401 }\n      )\n    }\n\n    const isValidToken = await verifyToken(token)\n\n    if (!isValidToken) {\n      return NextResponse.json(\n        { error: \"Invalid or expired token\" },\n        { status: 401 }\n      )\n    }\n\n    const { name } = await params\n    // Cache the registry import\n    const registryData = await import(\"@/registry.json\")\n    const registry = registryData.default\n\n    // Find the component from the registry.\n    const component = registry.items.find((c) => c.name === name)\n\n    // If the component is not found, return a 404 error.\n    if (!component) {\n      return NextResponse.json(\n        { error: \"Component not found\" },\n        { status: 404 }\n      )\n    }\n\n    // Validate before file operations.\n    const registryItem = registryItemSchema.parse(component)\n\n    // If the component has no files, return a 400 error.\n    if (!registryItem.files?.length) {\n      return NextResponse.json(\n        { error: \"Component has no files\" },\n        { status: 400 }\n      )\n    }\n\n    // Read all files in parallel.\n    const filesWithContent = await Promise.all(\n      registryItem.files.map(async (file) => {\n        const filePath = path.join(process.cwd(), file.path)\n        const content = await fs.readFile(filePath, \"utf8\")\n        return { ...file, content }\n      })\n    )\n\n    // Return the component with the files.\n    return NextResponse.json({ ...registryItem, files: filesWithContent })\n  } catch (error) {\n    console.error(\"Error processing component request:\", error)\n    return NextResponse.json({ error: \"Something went wrong\" }, { status: 500 })\n  }\n}\n",
      "type": "registry:file",
      "target": "app/registry/[name]/route.ts"
    },
    {
      "path": "registry/default/registry/lib/shadcn/registry/utils.ts",
      "content": "import { SignJWT, jwtVerify } from 'jose'\nimport { nanoid } from 'nanoid'\n\nconst key = new TextEncoder().encode(\n  process.env.REGISTRY_TOKEN_SECRET || 'default-secret-key'\n)\n\nexport async function generateToken(): Promise<string> {\n  return await new SignJWT({})\n    .setProtectedHeader({ alg: 'HS256' })\n    .setJti(nanoid())\n    .setIssuedAt()\n    .setExpirationTime('24h')\n    .sign(key)\n}\n\nexport async function verifyToken(token: string): Promise<boolean> {\n  try {\n    await jwtVerify(token, key)\n    return true\n  } catch {\n    return false\n  }\n} ",
      "type": "registry:file",
      "target": "lib/shadcn/registry/utils.ts"
    },
    {
      "path": "registry/default/registry/lib/shadcn/registry/types.ts",
      "content": "export interface AuthResponse {\n  success: boolean\n  message: string\n  token?: string\n}\n\nexport interface BasicAuthCredentials {\n  username: string\n  password: string\n} ",
      "type": "registry:file",
      "target": "lib/shadcn/registry/types.ts"
    }
  ]
}